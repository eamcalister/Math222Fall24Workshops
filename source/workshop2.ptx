<?xml version="1.0" encoding="UTF-8" ?>
<!-- Generated by Pandoc using pretext.lua -->
<!--To do: convert to python!-->
<worksheet><title>Integrals with Computers</title>

	<p>
		Even though we have learned integration techniques for many integrals in this class, it is often the case that antiderivatives cannot be written in terms of familiar functions (the so called <em>elementary functions</em>, which are essentially all the ones you learn about in Precalculus). When elementary antiderivatives don't exist (it's not just that you can't find them), one must turn to numerical approximation techniques to approximate definite integrals. We learned about these approximation techniques in class. They are very repetitive to do by hand, so we will program a computer to do them. In the process we will learn some Python using the Sympy and Numpy packages.
	</p>




		<section xml:id="symbolic_integration">
			<title>Symbolic Integration</title>
			<p>
				To do integrals and derivatives symbolically (i.e. to get a formulas), we use the Sympy package. The following is straightforward to use.
			</p>
			<program language="python$">
<input>
import sympy as sp

#define your variable as a symbol
x = sp.symbols('x')

#define your function
f = x**2

print(sp.integrate(f,x))
print(sp.diff(f,x))
</input>
			</program>

		</section>

		<section xml:id="numerical_methods">
			<title>Numerical Methods</title>

			<p>
				In this section we give a Python script for a right-hand Riemann sum. You can find a Jupyter notebook on Canvas that has this, as well as a left-hand Riemann sum and the midpoint rule. Since we know the trapezoid rule and Simpson's rule are computed from these, that's all we'll code up right now. 
			</p>

			<p>
				The right-hand Riemann sum is below, with some further explanation for those who know some Python.
			</p>
			<program language="python$">
				<input>
					import numpy as np


					#right-hand Riemann sum
					def right_hand_rule(f,a,b,n): #a and b are the endpoints and n is the number of rectangles
						x = np.linspace(a,b,n+1) #this creates the set of n+1 evenly spaced points starting at a and ending at b.
						y = f(x)
						h = (b-a)/n
						integral = h*np.sum(y[1:n+1])
						return integral
					
					
					#### Don't Modify above this line.
					
					#define function to integrate
					def f(x):
						return x**2 #change this function as needed
					
					#Give the endpoints and number of sub-intervals
					a = 0
					b = 2
					n = 3
					
					print(right_hand_rule(f,a,b,n))	
				</input>
			</program>

		</section>


		<section xml:id="exercises">
			<title>Exercises</title>

			<p>
				For these exercises, we will be considering the definite integral <me>\int_{1}^{2} \frac{x}{e^{x}-1}\,dx.</me>
			</p>
	
			<exercise>
			<ol>
				<li>
					<p>
						(2 points) Describe where you get stuck doing this integral by hand.
					</p>
				</li>
				<li>
					<p>
						(2 points) What does Matlab give you for an antiderivative of <m>\dfrac{x}{e^{x}-1}</m> (enter <c>exp(x)</c> for <m>e^{x}</m>)? Is it useful (to you)? 
					</p>
				</li>
			</ol> 
			</exercise>
			
			<exercise>
			<ol>
				<li>
					<p>
						(6 points)  Use a graph of the derivative of <m>\dfrac{x}{e^{x}-1}</m> to help you find <m>n</m> so that the LEFT and RIGHT approximation of this integral is within <m>0.001</m> of the exact value. Find this approximation. Include a printout of the graph of the derivative of <m>\dfrac{x}{e^{x}-1}</m> in your write-up.
					</p>
				</li>
				<li>
					<p>
						(6 points) Using the <m>n</m> you found in (2a), what do the other methods give as approximations. What is the maximum possible error for each method of approximation? Include any relevant graphs to show how you arrived at your error bounds.
					</p>
				</li>
				<li>
					<p>
						(6 points) For each of MID, TRAP, and SIMP, how large must $n$ be to make the approximation within <m>0.001</m> of the exact value of this integral? Be sure to explain your reasoning.
					</p>
				</li>
			</ol>
			</exercise>  
			
		</section>



</worksheet>

