<?xml version="1.0" encoding="UTF-8" ?>
<!-- Generated by Pandoc using pretext.lua -->
<!--To do: convert to python!-->
<worksheet><title>Integrals with Computers</title>
	<p>
		In this workshop we will:
	</p>
<objectives>

	<ol>
		<li>
			<p>
				learn to input symbolic functions into Python in order to differentiate and integrate them symbolically,
			</p>
		</li>
		<li>
			<p>
				use Python to apply our known numerical integration algorithms (with whatever number of subdivisions we choose) when necessary, and
			</p>
		</li>
		<li>
			<p>
				use error bounds for each numerical method to determine a definite integral within a given accuracy when an elementary antiderivative does not exist.
			</p>
		</li>
	</ol>
</objectives>


	<p>
		Even though we have learned integration techniques for many integrals in this class, it is often the case that antiderivatives cannot be written in terms of familiar functions (the so called <em>elementary functions</em>, which are essentially all the ones you learn about in Precalculus). When elementary antiderivatives don't exist (it's not just that you can't find them), one must turn to numerical approximation techniques to approximate definite integrals. We learned about these approximation techniques in class. They are very repetitive to do by hand, so we will program a computer to do them. In the process we will learn some Python using the Sympy and Numpy packages.
	</p>




		<section xml:id="symbolic_integration">
			<title>Symbolic Integration</title>
			<p>
				To do integrals and derivatives symbolically (i.e. to get a formulas), we use the Sympy package (Sympy is for symbolic calculations with Python). The following is straightforward to use.
			</p>
			<program language="python$">
<input>
import sympy as sp

#define your variable as a symbol
x = sp.symbols('x')

#define your function
f = x**2

print(sp.integrate(f,x))
print(sp.diff(f,x))
</input>
			</program>

		</section>

		<section xml:id="numerical_methods">
			<title>Numerical Methods</title>

			<p>
				In this section we give a Python script for a right-hand Riemann sum using the Numpy package (Numpy is for numerical calculation vs. symbolic). You can find a Python script on Canvas that has this, as well as a left-hand Riemann sum and the midpoint rule. Since we know the trapezoid rule and Simpson's rule are computed from these, that's all we'll code up right now. 
			</p>

			<p>
				The right-hand Riemann sum is below, with some further explanation for those who know some Python.
			</p>
			<program language="python$">
				<input>
					import numpy as np


					#right-hand Riemann sum
					def right_hand_rule(f,a,b,n): #a and b are the endpoints and n is the number of rectangles
						x = np.linspace(a,b,n+1) #this creates the set of n+1 evenly spaced points starting at a and ending at b.
						y = f(x)
						h = (b-a)/n
						integral = h*np.sum(y[1:n+1])
						return integral
					
					
					#### Don't Modify above this line.
					
					#define function to integrate
					def f(x):
						return x**2 #change this function as needed
					
					#Give the endpoints and number of sub-intervals
					a = 0
					b = 2
					n = 3
					
					print(right_hand_rule(f,a,b,n))	
				</input>
			</program>
		<p>
			In order for numerical integration rules (RIGHT, LEFT, MID, TRAP, and SIMP) to really be useful in real-world situations, we need to answer the following related questions:
			<ul>
				<li>
					<p>
						For a given function, on a given interval, using one of the rules, how much does the error decrease as we increase <m>n</m> and how large will <m>n</m> need to be to make the error as small as we want?
					</p>
				</li>
				<li>
					<p>
						How much better are the ``better'' rules than ones that are easier to compute?
					</p>
				</li>
			</ul>
		</p>

		<p>
			To begin answering these, fill in the following blanks using your understanding of RIGHT, LEFT, MID, and TRAP. Be sure you can explain each answer using a picture.
		</p>

		<assemblage>
			<title>Relation of Methods to Derivatives</title>
			<p>
				<ul>
					<li>
						<p>
							If <m>f'\gt 0</m> on <m>[a,b]</m>, then
							<me>
							\text{LEFT}(n)\leq \int_a^b f(x)\,dx \leq \text{RIGHT}(n).
							</me>
						</p>
					</li>
					<li>
						<p>
							If <m>f'\lt 0</m> on <m>[a,b]</m>, then
							<me>
							\text{RIGHT}(n)\leq \int_a^b f(x)\,dx \leq \text{LEFT}(n).
							</me>
						</p>
					</li>
					<li>
						<p>
							If <m>f''\gt 0</m> on <m>[a,b]</m>, then
							<me>
							\text{MID}(n)\leq \int_a^b f(x)\,dx \leq \text{TRAP}(n).
							</me>
						</p>
					</li>
					<li>
						<p>
							If <m>f''\lt 0</m> on <m>[a,b]</m>, then
							<me>
							\text{TRAP}(n)\leq \int_a^b f(x)\,dx \leq \text{LEFT}(n).
							</me>
						</p>
					</li>
				</ul>
			</p>
		</assemblage>
		
		<p>
			So we see that error in LEFT and RIGHT depends somehow on the first derivative, while the error in MID and TRAP depends somehow on the second. The following list of numerical error bounds can be derived using material from section 10.4 of the text and/or integration by parts. However, it would be fairly time consuming to derive them, so we will instead focus on their use.
		</p>
		
		<assemblage>
			<title>Error Bounds for Numerical Integration Methods</title>
			<p>
				<ul>
					<li><title>Left and Right Error Bounds</title>
						<p>
							If <m>|f'(x)|\leq M</m> for all <m>a\leq x\leq b</m>, then
							<me>
							\left|\mbox{LEFT}(n) - \int_a^{b} f(x)\, dx\right| \leq \frac{M(b-a)^2}{2n}
							</me>
							and 
							<me>
							\left|\mbox{RIGHT}(n) - \int_a^{b} f(x)\, dx\right| \leq \frac{M(b-a)^2}{2n}.
							</me>
						</p>
					</li>
					<li><title>Trap and Mid Error Bounds</title>
						<p>
							If <m>|f''(x)|\leq M</m> for all <m>a\leq x\leq b</m>, then
							<me>
							\left|\mbox{TRAP}(n) - \int_a^{b} f(x)\, dx\right| \leq \frac{M(b-a)^3}{12n^2}
							</me>
							and 
							<me>
							\left|\mbox{MID}(n) - \int_a^{b} f(x)\, dx\right| \leq \frac{M(b-a)^3}{24n^2}.
							</me>
						</p>
					</li>
					<li><title>Simpson's Rule Bound</title>
						<p>
							If <m>|f^{(4)}(x)|\leq M</m> for all <m>a\leq x\leq b</m>, then
							<me>
							\left|\mbox{SIMP}(n) - \int_a^{b} f(x)\, dx\right| \leq \frac{M(b-a)^5}{2880n^4}
							</me>
						</p>
					</li>
				</ul>
			</p>
		</assemblage>

		<example><title>Using the Error Bound Formulas</title>
			<p>
			Suppose we want to numerically integrate <m>f(x) = e^x</m> from <m>x=0</m> to <m>x=1</m>. We know the exact answer is <m>\int_0^1 e^x dx = e-1</m>. However, maybe we don't know the exact value of <m>e</m> (we know it's less than <m>3</m>, but not much else), that may not be useful. Let's use <m>n=2</m> rectangles and estimate the error for each method. To do this we must:
			<ol>
				<li>
					<p>
						Find the upper bound on the appropriate derivative for <m>f(x)</m>. Since the derivative of <m>e^x</m> is <m>e^x</m>, we can say <m>f^{(n)}(x)\leq 3</m> when <m>0\leq x\leq 1</m>. That is, <m>M = 3</m> for all the methods.
					</p>
				</li>
				<li>
					<p>
						Now plug into each formula to estimate possible errors with <m>n=2</m>.
					</p>
				</li>
			</ol>  
		</p>
		<p>
			We get the following:
			<me>
				\left|\mbox{LEFT}(n) - \int_0^{1} e^x\, dx\right| \leq \frac{3(1-0)^2}{2\cdot 2} = \frac{3}{4}
			</me>
			<me>
				\left|\mbox{RIGHT}(n) - \int_0^{1} e^x\, dx\right| \leq \frac{3(1-0)^2}{2\cdot 2} = \frac{3}{4}
			</me>
			<me>
				\left|\mbox{TRAP}(n) - \int_0^{1} e^x\, dx\right| \leq \frac{3(1-0)^3}{12\cdot 2^2} = \frac{3}{48}
			</me>
			<me>
				\left|\mbox{MID}(n) - \int_0^{1} e^x\, dx\right| \leq \frac{3(1-0)^3}{24\cdot 2^2} = \frac{3}{96}
			</me>
			<me>
				\left|\mbox{SIMP}(n) - \int_0^{1} e^x\, dx\right| \leq \frac{3(1-0)^5}{2880\cdot 2^4} = \frac{3}{46080}
			</me>
		</p>
		<p>
			This means the error using Simpson's Rule with just two rectangles will be less than or equal to <m>0.0000652</m>. If we apply Simpson's rule to this integral with <m>n=2</m>, we get
			<me>
				\int_0^1 e^x dx \approx \text{SIMP}(n) = 1.7183188419217472
			</me>
			The value of <m>e-1</m> given by a calculator is <m>1.718281828</m>. The actual error turns out to be about <m>0.000037</m>, which is less than the bound.
		</p>
		If we wanted to know how big <m>n</m> needs to be to get <m>\text{TRAP}(n)</m> to be within <m>6\cdot 10^{-5}</m> of the exact value, we would solve 
		<me>
			\frac{3(1-0)^3}{12n^2} \lt 0.00006
		</me>
		and get <m>n \gt \sqrt{\frac{10^6}{24}}</m>. This rounds up to <m>65</m>. So, if <m>n\geq 65</m>, <m>\text{TRAP}(n)</m> will give as good an estimate as <m>\text{SIMP}(2)</m>. 
		</example>

		</section>


		<section xml:id="exercises">
			<title>Exercises</title>

			<p>
				For these exercises, we will be considering the definite integral <me>\int_{1}^{2} \frac{x}{e^{x}-1}\,dx.</me>
			</p>
	
			<exercise>
				
			<ol marker = "(a)">
				<li>
					<p>
						(2 points) Describe where you get stuck doing this integral by hand.
					</p>
				</li>
				<li>
					<p>
						(2 points) What does Python give you for an antiderivative of <m>\dfrac{x}{e^{x}-1}</m> (enter <c>sp.exp(x)</c> for <m>e^{x}</m>)? Is it useful (to you)? 
					</p>
				</li>
			</ol> 
		
			</exercise>
			
			<exercise>
			<ol marker = "(a)">
				<li>
					<p>
						(6 points)  Use a graph of the derivative of <m>\dfrac{x}{e^{x}-1}</m> to help you find <m>n</m> so that the LEFT and RIGHT approximation of this integral is within <m>0.001</m> of the exact value. Find this approximation. Include a printout of the graph of the derivative of <m>\dfrac{x}{e^{x}-1}</m> in your write-up.
					</p>
				</li>
				<li>
					<p>
						(6 points) Using the <m>n</m> you found in (2a), what do the other methods give as approximations. What is the maximum possible error for each method of approximation? Include any relevant graphs to show how you arrived at your error bounds.
					</p>
				</li>
				<li>
					<p>
						(6 points) For each of MID, TRAP, and SIMP, how large must <m>n</m> be to make the approximation within <m>0.001</m> of the exact value of this integral? Be sure to explain your reasoning.
					</p>
				</li>
			</ol>
			</exercise>  
			
		</section>



</worksheet>

